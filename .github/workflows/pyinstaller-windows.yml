name: PyInstaller

on:
  push:
    branches:
      - main

# Set these environment variables for your project
env:
  PYINST_EXE_NAME: show_version
  SOURCE_PYTHON_FILE_PATH: show_version.py
  _PYTHON_VERSION: 3.8

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{env._PYTHON_VERSION}}
        # Checkout the repository
        uses: actions/setup-python@v1
        with:
          python-version: ${{env._PYTHON_VERSION}}
      - name: Install dependencies
        # Install python dependencies
        # If the requirements.txt is in a different directory,
        # or if python setup.py is used, change accordingly
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          python setup.py install
      - name: Pytest
        run: |
          pytest tests --junitxml=test_results/junit/test-results.xml --json-report --json-report-file=test_results/pytest-reports/unit_tests.json --html=test_results/pytest-reports/unit_tests_report.html --self-contained-html --cov=pyinstaller_test tests/ --cov-report html:test_results/coverage/cov_html --cov-report xml:test_results/coverage/cov.xml --cov-report annotate:test_results/coverage/cov_annotate --cov=pyinstaller_test tests/
      - name: pylint
        run: |
          pylint pyinstaller_test/
      - name: flake8
        run: |
          flake8 pyinstaller_test/
      - name: Create GitHub release
        # Creates a Github release
        # These are numbered sequentially.  If a version tag is to be
        # used (v1.1.1, etc.) than this will need to be changed to
        # pull the git tags from the latest commit.
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
      - name: View Content 1 (debug)
        # Used to view files generated by this workflow.
        run: python .\.build_exe\list_files.py
      - name: Pyinstaller Build EXE
        id: pyinstaller-build
        env:
          SOURCE_PYTHON_FILE_PATH: ${{env.SOURCE_PYTHON_FILE_PATH}}
          PYINST_EXE_NAME: ${{env.PYINST_EXE_NAME}}
        run: |
          # Note, if only one type of build is desired, one of these steps can be removed
          # and the assocciated upload step can be removed.

          # Builds EXE in a directory with associated library files visible to end user
          .\.build_exe\build_exe.bat

          # Builds EXE in a directory in a single large file
          .\.build_exe\build_exe_onefile.bat
      - name: View content 2 (debug)
        # Used to view files generated by this workflow.
        run: python .\.build_exe\list_files.py
      - name: Archive Directories
        run: |
          # Archive directory with EXE and library files
          7z a -tzip ".\.build_exe\${{env.PYINST_EXE_NAME}}.zip" ".\.build_exe\dist\${{env.PYINST_EXE_NAME}}"
          # List the contents of the directory archive.
          7z l ".\.build_exe\${{env.PYINST_EXE_NAME}}.zip"
          # Archive the directory that contains the bundled EXE
          7z a -tzip ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip" ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}"
          # List the contents of the archive with the bundled EXE.
          7z l ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip"

      - name: View content 3 (debug)
        # Used to view files generated by this workflow.
        run: python .\.build_exe\list_files.py
      - name: Upload EXE Directory Release Asset
        # Uploads the ZIP file with the EXE and the associated files.
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: .\.build_exe\${{env.PYINST_EXE_NAME}}.zip
          asset_name: ${{env.PYINST_EXE_NAME}}-v${{ github.run_number }}.zip
          asset_content_type: application/zip
      - name: Upload Bundled EXE (pyinstaller --onefile) Release Asset
        # Uploads the ZIP file with the bundled EXE and any associated files.
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: .\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip
          asset_name: ${{env.PYINST_EXE_NAME}}-bundle-v${{ github.run_number }}.zip
          asset_content_type: application/zip


